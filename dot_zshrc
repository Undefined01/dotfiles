typeset -A ZI
ZI[BIN_DIR]="${HOME}/.zi/bin"
if [ ! -d ${ZI[BIN_DIR]} ]; then
    mkdir -p "$ZI[BIN_DIR]"
    git clone git@github.com:z-shell/zi.git "$ZI[BIN_DIR]"
fi
source "${ZI[BIN_DIR]}/zi.zsh"
autoload -Uz _zi
(( ${+_comps} )) && _comps[zi]=_zi

ZI_FROM=""
#ZI_FROM="from=hub.nuaa.cf"

zstyle ':completion:*' menu select
zi wait lucid $ZI_FROM for \
  atinit"ZI[COMPINIT_OPTS]=-C; zicompinit; zicdreplay" \
     zsh-users/zsh-syntax-highlighting \
  blockf \
     zsh-users/zsh-completions \
  atload"!_zsh_autosuggest_start" \
     zsh-users/zsh-autosuggestions

if command -v fzf-share >/dev/null 2>&1; then
  source $(fzf-share)/completion.zsh
  source $(fzf-share)/key-bindings.zsh
fi

#zstyle ":history-search-multi-word" page-size "11"
#zi ice $ZI_FROM wait lucid
#zi light z-shell/H-S-MW

#zi ice $ZI_FROM lucid wait='!0' compile'(pure|async).zsh' pick'async.zsh' src'pure.zsh'
#zi light sindresorhus/pure

zi light _local/cmdtime
RPROMPT="%F{red}%(?..%?)%f"

alias ls='ls --color=auto'
alias ll='ls -alh'
alias grep='grep --color=auto'
PS1='%F{green}%~%f%(!.#.$) '

HISTFILE="$HOME/.bash_history"
HISTSIZE=100000
SAVEHIST=100000
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.

bindkey -e
# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"       beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"        end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"     overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}"  backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"     delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"         up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"       down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"       backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"      forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"     beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"   end-of-buffer-or-history
[[ -n "${key[Shift-Tab]}" ]] && bindkey -- "${key[Shift-Tab]}"  reverse-menu-complete

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start { echoti smkx }
	function zle_application_mode_stop { echoti rmkx }
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

autoload -z edit-command-line
zle -N edit-command-line
bindkey '^x^e' edit-command-line

bindkey -s '\eo' 'cd ..\n'

if command -v exa >/dev/null 2>&1; then
  alias ls='exa --color=auto'
  alias ll='exa --color=auto --long --all --color-scale --extended'
else
  alias ls='ls --color=auto'
  alias ll='ls --color=auto -alh'
fi

if command -v fzf-share >/dev/null 2>&1; then
  source $(fzf-share)/completion.bash
  source $(fzf-share)/key-bindings.bash
fi

command -v zoxide >/dev/null 2>&1 && eval "$(zoxide init --cmd cd bash)"

alias grep='grep --color=auto'

command -v vim >/dev/null 2>&1 && export VISUAL='vim'

