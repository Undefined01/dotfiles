declare -A ZINIT
ZINIT[BIN_DIR]="${HOME}/.local/share/zinit"
if [ ! -d "$ZINIT[BIN_DIR]" ]; then
    mkdir -p "$ZINIT[BIN_DIR]"
    echo "Installing Zinit to $ZINIT[BIN_DIR]"
    git clone --depth=1 git@github.com:zdharma-continuum/zinit.git "$ZINIT[BIN_DIR]"
fi
source "${ZINIT[BIN_DIR]}/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
autoload -Uz compinit
compinit


ZI_PROTO='proto=ssh'
ZI_FROM='from=git@github.com'
#ZI_FROM="from=hub.nuaa.cf"

zstyle ':completion:*' menu select
zi $ZI_PROTO $ZI_FROM depth'1' wait lucid for \
  light-mode \
    zdharma-continuum/fast-syntax-highlighting  \
  blockf \
    zsh-users/zsh-completions \
  atload"!_zsh_autosuggest_start" \
    zsh-users/zsh-autosuggestions

#zi ice $ZI_PROTO $ZI_FROM lucid wait='!0' compile'(pure|async).zsh' pick'async.zsh' src'pure.zsh'
#zi light sindresorhus/pure

zi light _local/cmdtime
PS1='%F{green}%~%f%(?..!%F{red}%?%f)%(!.#.$) '


HISTFILE="$HOME/.bash_history"
HISTSIZE=10000
SAVEHIST=10000
setopt BANG_HIST                 # Perform textual history expansion, csh-style, treating the character `!' specially.
# setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits. Conflict with `share_history'.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
# setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded previously.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.


bindkey -e
# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"       beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"        end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"     overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}"  backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"     delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"         up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"       down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"       backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"      forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"     beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"   end-of-buffer-or-history
[[ -n "${key[Shift-Tab]}" ]] && bindkey -- "${key[Shift-Tab]}"  reverse-menu-complete

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start { echoti smkx }
	function zle_application_mode_stop { echoti rmkx }
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi


autoload -z edit-command-line
zle -N edit-command-line
bindkey '^x^e' edit-command-line

bindkey -s '\eo' 'cd ..\n'


function init_ls() {
  if command -v exa >/dev/null 2>&1; then
    alias ls='exa --color=auto'
    alias ll='exa --color=auto --long --all --color-scale --extended'
  else
    alias ls='ls --color=auto'
    alias ll='ls --color=auto -alh'
  fi
}
function init_fzf() {
  local EXT=zsh
  local FZF_PATH
  if command -v fzf-share >/dev/null 2>&1; then
    FZF_PATH="$(fzf-share)"
  elif command -v fzf >/dev/null 2>&1; then
    if [ -f /usr/share/fzf/completion.$EXT ]; then
      FZF_PATH=/usr/share/fzf
    elif [ -f /usr/local/share/fzf/completion.$EXT ]; then
      FZF_PATH=/usr/local/share/fzf
    elif [ -f /usr/share/doc/fzf/examples/completion.$EXT ]; then
      FZF_PATH=/usr/share/doc/fzf/examples/
    fi
  fi
  [ -f "$FZF_PATH/completion.$EXT" ] && source "$FZF_PATH/completion.$EXT"
  [ -f "$FZF_PATH/key-bindings.$EXT" ] && source "$FZF_PATH/key-bindings.$EXT"
}
init_ls
init_fzf

command -v vi >/dev/null 2>&1 && export VISUAL='vi'
command -v vim >/dev/null 2>&1 && export VISUAL='vim'
command -v grep >/dev/null 2>&1 && alias grep='grep --color=auto'
command -v zoxide >/dev/null 2>&1 && eval "$(zoxide init --cmd cd zsh)"
command -v bat >/dev/null 2>&1 && alias cat='bat'
command -v delta >/dev/null 2>&1 && alias diff='delta'
command -v tldr >/dev/null 2>&1 && export TLDR_AUTO_UPDATE_DISABLED=1

zi $ZI_PROTO $ZI_FROM depth'1' wait lucid for \
  has'fzf' \
    Aloxaf/fzf-tab

